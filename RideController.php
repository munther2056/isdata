<?php namespace App\Http\Controllers; use App\Models\Ride; use App\Models\Payment; use App\Models\User; use App\Models\Receipt; use Illuminate\Http\Request; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class RideTransactionController extends Controller { public function completeRideAndProcessPayment(Request $request)
{ DB::beginTransaction(); try { $ride = Ride::findOrFail($request->ride_id); $ride->update(['status' => 'completed']); $rider = User::findOrFail($ride->rider_id); $rider->update(['status' => 'available']); $driver = User::find($ride->driver_id); if ($driver) { $driver->update(['status' => 'available']); } $paymentSuccessful = $this->processPayment($request->payment_data); if (!$paymentSuccessful) { throw new \Exception('Payment processing failed.'); } $payment = Payment::create([ 'rider_id' => $ride->rider_id, 'ride_id' => $ride->ride_id, 'payment_method' => $request->payment_data['method'], 'amount' => $request->payment_data['amount'], 'payment_status' => 'completed', ]); $this->generateAndStoreReceipt($payment, $ride); DB::commit(); return response()->json(['payment_status' => 'completed', 'message' => 'Ride completed and payment processed successfully.']); } catch (\Exception $e) { DB::rollback(); Log::error('Error completing ride and processing payment: ' . $e->getMessage()); return response()->json(['error' => $e->getMessage()], 500); } } private function processPayment($paymentData) {
return true; } private function generateAndStoreReceipt($payment, $ride) { $receiptNumber = uniqid('receipt_'); $receipt = Receipt::create([ 'payment_id' => $payment->payment_id, 'rider_id' => $payment->rider_id, 'driver_id' => $ride->driver_id, 'total_amount' => $payment->amount, 'receipt_number' => $receiptNumber, ]); $receipt->update(['receipt_url' => 'some_generated_url_for_receipt_' . $receiptNumber]); }
